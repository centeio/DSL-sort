/**
 * generated by Xtext 2.12.0
 */
package org.xtext.example.sorting.generator;

import com.google.common.collect.Iterables;
import com.google.common.collect.Iterators;
import java.util.Iterator;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.example.sorting.sorting.Config;
import org.xtext.example.sorting.sorting.Filter;
import org.xtext.example.sorting.sorting.Import;
import org.xtext.example.sorting.sorting.Instance;
import org.xtext.example.sorting.sorting.Param;
import org.xtext.example.sorting.sorting.Port;
import org.xtext.example.sorting.sorting.Sink;
import org.xtext.example.sorting.sorting.Source;
import org.xtext.example.sorting.sorting.Transition;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class SortingGenerator extends AbstractGenerator {
  private String packname = "pipesgraph";
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    fsa.generateFile("PipeStages.java", this.generatePipeStages(((Config) _head)));
    final Function1<Config, String> _function = (Config it) -> {
      return it.getName();
    };
    Iterator<String> _map = IteratorExtensions.<Config, String>map(Iterators.<Config>filter(resource.getAllContents(), Config.class), _function);
    String _plus = (_map + ".java");
    EObject _head_1 = IterableExtensions.<EObject>head(resource.getContents());
    fsa.generateFile(_plus, this.generateClass(((Config) _head_1)));
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(this.packname);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public abstract class Component{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected int level = 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void invoke();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String call;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Port getPort(String name);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int getLevel() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return level;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void checkLevel(Component c){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(level<c.getLevel())");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("level = c.getLevel()+1;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private int getLevel() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return level;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    fsa.generateFile("Component.java", _builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package ");
    _builder_1.append(this.packname);
    _builder_1.append(";");
    _builder_1.newLineIfNotEmpty();
    _builder_1.newLine();
    _builder_1.append("import java.util.HashMap;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("public abstract class Source extends Component{");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("protected HashMap<String, Port> outPorts = new HashMap<String, Port>();");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("Port getPort(String name){return outPorts.get(name);}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    fsa.generateFile("Source.java", _builder_1);
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("package ");
    _builder_2.append(this.packname);
    _builder_2.append(";");
    _builder_2.newLineIfNotEmpty();
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("import java.util.HashMap;");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("public abstract class Filter extends Component{");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("protected HashMap<String, Port> inPorts = new HashMap<String, Port>();");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("protected HashMap<String, Port> outPorts = new HashMap<String, Port>();");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("public Port getPort(String name){");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("if(inPorts.get(name) != null) ");
    _builder_2.newLine();
    _builder_2.append("\t\t\t");
    _builder_2.append("return inPorts.get(name);");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("return outPorts.get(name);");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("}\t\t");
    _builder_2.newLine();
    _builder_2.append("}");
    _builder_2.newLine();
    fsa.generateFile("Filter.java", _builder_2);
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("package ");
    _builder_3.append(this.packname);
    _builder_3.append(";");
    _builder_3.newLineIfNotEmpty();
    _builder_3.newLine();
    _builder_3.append("\t\t");
    _builder_3.append("import java.util.HashMap;");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("public abstract class Sink extends Component{");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("protected HashMap<String, Port> inPorts = new HashMap<String, Port>();");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("public Port getPort(String name){");
    _builder_3.newLine();
    _builder_3.append("\t\t");
    _builder_3.append("return inPorts.get(name);");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("\t\t\t");
    _builder_3.append("}");
    fsa.generateFile("Sink.java", _builder_3);
    StringConcatenation _builder_4 = new StringConcatenation();
    _builder_4.append("package ");
    _builder_4.append(this.packname);
    _builder_4.append(";");
    _builder_4.newLineIfNotEmpty();
    _builder_4.append("import java.util.ArrayList;");
    _builder_4.newLine();
    _builder_4.newLine();
    _builder_4.append("public class Port{");
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("protected Component component;");
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("protected String name;");
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("protected ArrayList<Edge> edges = new ArrayList<Edge>();");
    _builder_4.newLine();
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("public Port(String name, Component component){");
    _builder_4.newLine();
    _builder_4.append("\t\t");
    _builder_4.append("this.name = name;");
    _builder_4.newLine();
    _builder_4.append("\t\t");
    _builder_4.append("this.component = component;");
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("}");
    _builder_4.newLine();
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("public Component getComponent() {");
    _builder_4.newLine();
    _builder_4.append("\t\t");
    _builder_4.append("return component;");
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("}");
    _builder_4.newLine();
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("public void setComponent(Component component) {");
    _builder_4.newLine();
    _builder_4.append("\t\t");
    _builder_4.append("this.component = component;");
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("}");
    _builder_4.newLine();
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("public String getName() {");
    _builder_4.newLine();
    _builder_4.append("\t\t");
    _builder_4.append("return name;");
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("}");
    _builder_4.newLine();
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("public void setName(String name) {");
    _builder_4.newLine();
    _builder_4.append("\t\t");
    _builder_4.append("this.name = name;");
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("}");
    _builder_4.newLine();
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("public ArrayList<Edge> getEdges() {");
    _builder_4.newLine();
    _builder_4.append("\t\t");
    _builder_4.append("return edges;");
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("}");
    _builder_4.newLine();
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("public void setEdges(ArrayList<Edge> edges) {");
    _builder_4.newLine();
    _builder_4.append("\t\t");
    _builder_4.append("this.edges = edges;");
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("}");
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("public void addEdge(Edge edge){");
    _builder_4.newLine();
    _builder_4.append("\t\t");
    _builder_4.append("this.edges.add(edge);");
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("}");
    _builder_4.newLine();
    _builder_4.append("}");
    _builder_4.newLine();
    fsa.generateFile("Port.java", _builder_4);
    StringConcatenation _builder_5 = new StringConcatenation();
    _builder_5.append("package ");
    _builder_5.append(this.packname);
    _builder_5.append(";");
    _builder_5.newLineIfNotEmpty();
    _builder_5.append("public class Edge{");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("protected Port source; // <n1.get(p1),n2.get(p2)> ");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("protected Port target;");
    _builder_5.newLine();
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("public Edge(Port source, Port target){");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("this.source = source;");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("this.target = target;");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("}");
    _builder_5.newLine();
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("public Port getSource() {");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("return source;");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("}");
    _builder_5.newLine();
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("public void setSource(Port source) {");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("this.source = source;");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("}");
    _builder_5.newLine();
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("public Port getTarget() {");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("return target;");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("}");
    _builder_5.newLine();
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("public void setTarget(Port target) {");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("this.target = target;");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("}");
    _builder_5.newLine();
    _builder_5.append("}");
    _builder_5.newLine();
    fsa.generateFile("Edge.java", _builder_5);
    Iterable<Source> _filter = Iterables.<Source>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Source.class);
    for (final Source source : _filter) {
      String _name = source.getName();
      String _plus_1 = (_name + ".java");
      StringConcatenation _builder_6 = new StringConcatenation();
      _builder_6.append("package ");
      _builder_6.append(this.packname);
      _builder_6.append(";");
      _builder_6.newLineIfNotEmpty();
      _builder_6.newLine();
      _builder_6.append("public class ");
      String _name_1 = source.getName();
      _builder_6.append(_name_1);
      _builder_6.append(" extends Source{");
      _builder_6.newLineIfNotEmpty();
      _builder_6.append("\t");
      _builder_6.append("public ");
      String _name_2 = source.getName();
      _builder_6.append(_name_2, "\t");
      _builder_6.append("(String name){");
      _builder_6.newLineIfNotEmpty();
      _builder_6.append("\t\t");
      _builder_6.append("this.name=name;");
      _builder_6.newLine();
      {
        EList<Port> _outPorts = source.getOutPorts();
        for(final Port port : _outPorts) {
          _builder_6.append("\t\t");
          _builder_6.append("inPorts.put(");
          String _name_3 = port.getName();
          _builder_6.append(_name_3, "\t\t");
          _builder_6.append(", new Port(");
          String _name_4 = port.getName();
          _builder_6.append(_name_4, "\t\t");
          _builder_6.append(",this));");
          _builder_6.newLineIfNotEmpty();
        }
      }
      _builder_6.append("\t");
      _builder_6.append("}");
      _builder_6.newLine();
      _builder_6.append("\t");
      String _code = source.getCode();
      _builder_6.append(_code, "\t");
      _builder_6.newLineIfNotEmpty();
      _builder_6.append("} ");
      fsa.generateFile(_plus_1, _builder_6);
    }
    Iterable<Filter> _filter_1 = Iterables.<Filter>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Filter.class);
    for (final Filter filter : _filter_1) {
      String _name_5 = filter.getName();
      String _plus_2 = (_name_5 + ".java");
      StringConcatenation _builder_7 = new StringConcatenation();
      _builder_7.append("package ");
      _builder_7.append(this.packname);
      _builder_7.append(";");
      _builder_7.newLineIfNotEmpty();
      _builder_7.append("public class ");
      String _name_6 = filter.getName();
      _builder_7.append(_name_6);
      _builder_7.append(" extends Filter{");
      _builder_7.newLineIfNotEmpty();
      _builder_7.append("\t");
      _builder_7.append("public ");
      String _name_7 = filter.getName();
      _builder_7.append(_name_7, "\t");
      _builder_7.append("(String name){");
      _builder_7.newLineIfNotEmpty();
      _builder_7.append("\t\t");
      _builder_7.append("this.name=name;");
      _builder_7.newLine();
      {
        EList<Port> _inPorts = filter.getInPorts();
        for(final Port port_1 : _inPorts) {
          _builder_7.append("\t\t");
          _builder_7.append("inPorts.put(");
          String _name_8 = port_1.getName();
          _builder_7.append(_name_8, "\t\t");
          _builder_7.append(", new Port(");
          String _name_9 = port_1.getName();
          _builder_7.append(_name_9, "\t\t");
          _builder_7.append(",this));");
          _builder_7.newLineIfNotEmpty();
        }
      }
      {
        EList<Port> _outPorts_1 = filter.getOutPorts();
        for(final Port port_2 : _outPorts_1) {
          _builder_7.append("\t\t");
          _builder_7.append("outPorts.put(");
          String _name_10 = port_2.getName();
          _builder_7.append(_name_10, "\t\t");
          _builder_7.append(", new Port(");
          String _name_11 = port_2.getName();
          _builder_7.append(_name_11, "\t\t");
          _builder_7.append(",this));");
          _builder_7.newLineIfNotEmpty();
        }
      }
      _builder_7.append("\t");
      _builder_7.append("}");
      _builder_7.newLine();
      _builder_7.append("\t");
      String _code_1 = filter.getCode();
      _builder_7.append(_code_1, "\t");
      _builder_7.newLineIfNotEmpty();
      _builder_7.append("\t");
      _builder_7.newLine();
      _builder_7.append("}");
      fsa.generateFile(_plus_2, _builder_7);
    }
    Iterable<Sink> _filter_2 = Iterables.<Sink>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Sink.class);
    for (final Sink sink : _filter_2) {
      {
        String _name_12 = sink.getName();
        String _plus_3 = (_name_12 + ".java");
        StringConcatenation _builder_8 = new StringConcatenation();
        _builder_8.append("package ");
        _builder_8.append(this.packname);
        _builder_8.append(";");
        _builder_8.newLineIfNotEmpty();
        _builder_8.append("public class ");
        String _name_13 = sink.getName();
        _builder_8.append(_name_13);
        _builder_8.append(" extends Sink{");
        _builder_8.newLineIfNotEmpty();
        _builder_8.append("\t");
        _builder_8.append("public ");
        String _name_14 = sink.getName();
        _builder_8.append(_name_14, "\t");
        _builder_8.append("(String name){");
        _builder_8.newLineIfNotEmpty();
        _builder_8.append("\t\t");
        _builder_8.append("this.name=name;");
        _builder_8.newLine();
        {
          EList<Port> _outPorts_2 = sink.getOutPorts();
          for(final Port port_3 : _outPorts_2) {
            _builder_8.append("\t\t");
            _builder_8.append("outPorts.put(");
            String _name_15 = port_3.getName();
            _builder_8.append(_name_15, "\t\t");
            _builder_8.append(", new Port(");
            String _name_16 = port_3.getName();
            _builder_8.append(_name_16, "\t\t");
            _builder_8.append(",this));");
            _builder_8.newLineIfNotEmpty();
          }
        }
        _builder_8.append("\t");
        _builder_8.append("}");
        _builder_8.newLine();
        _builder_8.append("\t");
        String _code_2 = sink.getCode();
        _builder_8.append(_code_2, "\t");
        _builder_8.newLineIfNotEmpty();
        _builder_8.append("\t");
        _builder_8.newLine();
        _builder_8.append("}");
        _builder_8.newLine();
        fsa.generateFile(_plus_3, _builder_8);
        EObject _head_2 = IterableExtensions.<EObject>head(resource.getContents());
        fsa.generateFile("Graph.java", this.generate(((Config) _head_2)));
      }
    }
  }
  
  public CharSequence generateClass(final Config config) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }
  
  public CharSequence generatePipeStages(final Config config) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(this.packname);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    {
      EList<Import> _imports = config.getImports();
      for(final Import imp : _imports) {
        _builder.append("\t");
        _builder.append("import ");
        String _name = imp.getName();
        _builder.append(_name, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("public abstract class PipeStages{");
    _builder.newLine();
    {
      EList<Param> _params = config.getParams();
      for(final Param par : _params) {
        _builder.append("\t");
        String _value = par.getValue();
        _builder.append(_value, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public String className(final Resource res) {
    String name = res.getURI().lastSegment();
    return name.substring(0, name.indexOf("."));
  }
  
  public CharSequence generate(final Config config) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(this.packname);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    {
      EList<Import> _imports = config.getImports();
      for(final Import imp : _imports) {
        _builder.append("\t");
        _builder.append("import ");
        String _name = imp.getName();
        _builder.append(_name, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("class Graph {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private ArrayList<Edge> edges = new ArrayList<Edge>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private HashMap<String,Component> nodes = new HashMap<String,Component>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public void addEdge(Instance from, Port pfrom, Instance to, Port pto){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Component csource = nodes.get(from);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Component ctarget = nodes.get(target);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Port source = csource.getPort(pfrom);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Port target = ctarget.getPort(pto);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Edge edge = new Edge(source, target);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("edges.put(edge);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("csource.addEdge(edge);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ctarget.addEdge(edge);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ctarget.checkLevel(csource);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public static void main(String args[]) {");
    _builder.newLine();
    {
      EList<Instance> _instances = config.getInstances();
      for(final Instance instance : _instances) {
        _builder.append("\t\t\t");
        String _name_1 = instance.getComponent().getName();
        _builder.append(_name_1, "\t\t\t");
        _builder.append(" ");
        String _name_2 = instance.getName();
        _builder.append(_name_2, "\t\t\t");
        _builder.append(" = new ");
        String _name_3 = instance.getComponent().getName();
        _builder.append(_name_3, "\t\t\t");
        _builder.append("(");
        String _name_4 = instance.getName();
        _builder.append(_name_4, "\t\t\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("nodes.put(");
        String _name_5 = instance.getName();
        _builder.append(_name_5, "\t\t\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<Transition> _transitions = config.getTransitions();
      for(final Transition t : _transitions) {
        _builder.append("\t\t\t");
        _builder.append("addEdge(");
        Instance _source = t.getSource();
        _builder.append(_source, "\t\t\t");
        _builder.append(",");
        Port _targetPort = t.getTargetPort();
        _builder.append(_targetPort, "\t\t\t");
        _builder.append(",");
        Instance _target = t.getTarget();
        _builder.append(_target, "\t\t\t");
        _builder.append(",");
        Port _sourcePort = t.getSourcePort();
        _builder.append(_sourcePort, "\t\t\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    return _builder;
  }
}
