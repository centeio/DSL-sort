/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.sorting.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SortingGrammarAccess extends AbstractGrammarElementFinder {
	
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sorting.Sorting.Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cTypeAlternatives_0_0 = (Alternatives)cTypeAssignment_0.eContents().get(0);
		private final Keyword cTypeIntKeyword_0_0_0 = (Keyword)cTypeAlternatives_0_0.eContents().get(0);
		private final Keyword cTypeStringKeyword_0_0_1 = (Keyword)cTypeAlternatives_0_0.eContents().get(1);
		private final Keyword cTypeDoubleKeyword_0_0_2 = (Keyword)cTypeAlternatives_0_0.eContents().get(2);
		private final Keyword cTypeLongKeyword_0_0_3 = (Keyword)cTypeAlternatives_0_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Type:
		//	type=('int' | 'String' | 'double' | 'long') ('[' ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=('int' | 'String' | 'double' | 'long') ('[' ']')?
		public Group getGroup() { return cGroup; }
		
		//type=('int' | 'String' | 'double' | 'long')
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//('int' | 'String' | 'double' | 'long')
		public Alternatives getTypeAlternatives_0_0() { return cTypeAlternatives_0_0; }
		
		//'int'
		public Keyword getTypeIntKeyword_0_0_0() { return cTypeIntKeyword_0_0_0; }
		
		//'String'
		public Keyword getTypeStringKeyword_0_0_1() { return cTypeStringKeyword_0_0_1; }
		
		//'double'
		public Keyword getTypeDoubleKeyword_0_0_2() { return cTypeDoubleKeyword_0_0_2; }
		
		//'long'
		public Keyword getTypeLongKeyword_0_0_3() { return cTypeLongKeyword_0_0_3; }
		
		//('[' ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_1() { return cRightSquareBracketKeyword_1_1; }
	}
	public class SourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sorting.Sorting.Source");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cOutKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeTypeParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cInputMethodKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cMethodAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cMethodSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cMethodAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cFullStopKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_5_2_1 = (RuleCall)cGroup_5_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Source:
		//	'source' name=ID '{'
		//	'out:' type=Type ('input-method:' method=STRING ('.' STRING)*)? //default and optional
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'source' name=ID '{' 'out:' type=Type ('input-method:' method=STRING ('.' STRING)*)? //default and optional
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'source'
		public Keyword getSourceKeyword_0() { return cSourceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'out:'
		public Keyword getOutKeyword_3() { return cOutKeyword_3; }
		
		//type=Type
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_4_0() { return cTypeTypeParserRuleCall_4_0; }
		
		//('input-method:' method=STRING ('.' STRING)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'input-method:'
		public Keyword getInputMethodKeyword_5_0() { return cInputMethodKeyword_5_0; }
		
		//method=STRING
		public Assignment getMethodAssignment_5_1() { return cMethodAssignment_5_1; }
		
		//STRING
		public RuleCall getMethodSTRINGTerminalRuleCall_5_1_0() { return cMethodSTRINGTerminalRuleCall_5_1_0; }
		
		//('.' STRING)*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//'.'
		public Keyword getFullStopKeyword_5_2_0() { return cFullStopKeyword_5_2_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_5_2_1() { return cSTRINGTerminalRuleCall_5_2_1; }
		
		////default and optional
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class FilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sorting.Sorting.Filter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFilterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInTypeTypeParserRuleCall_4_0 = (RuleCall)cInTypeAssignment_4.eContents().get(0);
		private final Keyword cOutKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOutTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOutTypeTypeParserRuleCall_6_0 = (RuleCall)cOutTypeAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cMethodKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cMethodAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cMethodSTRINGTerminalRuleCall_7_1_0 = (RuleCall)cMethodAssignment_7_1.eContents().get(0);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cFullStopKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_7_2_1 = (RuleCall)cGroup_7_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Filter:
		//	'filter' name=ID '{'
		//	'in:' inType=Type
		//	'out:' outType=Type ('method:' method=STRING ('.' STRING)*)? //default and optional
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'filter' name=ID '{' 'in:' inType=Type 'out:' outType=Type ('method:' method=STRING ('.' STRING)*)? //default and optional
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'filter'
		public Keyword getFilterKeyword_0() { return cFilterKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'in:'
		public Keyword getInKeyword_3() { return cInKeyword_3; }
		
		//inType=Type
		public Assignment getInTypeAssignment_4() { return cInTypeAssignment_4; }
		
		//Type
		public RuleCall getInTypeTypeParserRuleCall_4_0() { return cInTypeTypeParserRuleCall_4_0; }
		
		//'out:'
		public Keyword getOutKeyword_5() { return cOutKeyword_5; }
		
		//outType=Type
		public Assignment getOutTypeAssignment_6() { return cOutTypeAssignment_6; }
		
		//Type
		public RuleCall getOutTypeTypeParserRuleCall_6_0() { return cOutTypeTypeParserRuleCall_6_0; }
		
		//('method:' method=STRING ('.' STRING)*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'method:'
		public Keyword getMethodKeyword_7_0() { return cMethodKeyword_7_0; }
		
		//method=STRING
		public Assignment getMethodAssignment_7_1() { return cMethodAssignment_7_1; }
		
		//STRING
		public RuleCall getMethodSTRINGTerminalRuleCall_7_1_0() { return cMethodSTRINGTerminalRuleCall_7_1_0; }
		
		//('.' STRING)*
		public Group getGroup_7_2() { return cGroup_7_2; }
		
		//'.'
		public Keyword getFullStopKeyword_7_2_0() { return cFullStopKeyword_7_2_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_7_2_1() { return cSTRINGTerminalRuleCall_7_2_1; }
		
		////default and optional
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class SinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.sorting.Sorting.Sink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInTypeTypeParserRuleCall_4_0 = (RuleCall)cInTypeAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cOutputMethodKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cMethodAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cMethodSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cMethodAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cFullStopKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_5_2_1 = (RuleCall)cGroup_5_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Sink:
		//	'sink' name=ID '{'
		//	'in:' inType=Type ('output-method:' method=STRING ('.' STRING)*)? //default and optional
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'sink' name=ID '{' 'in:' inType=Type ('output-method:' method=STRING ('.' STRING)*)? //default and optional
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'sink'
		public Keyword getSinkKeyword_0() { return cSinkKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'in:'
		public Keyword getInKeyword_3() { return cInKeyword_3; }
		
		//inType=Type
		public Assignment getInTypeAssignment_4() { return cInTypeAssignment_4; }
		
		//Type
		public RuleCall getInTypeTypeParserRuleCall_4_0() { return cInTypeTypeParserRuleCall_4_0; }
		
		//('output-method:' method=STRING ('.' STRING)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'output-method:'
		public Keyword getOutputMethodKeyword_5_0() { return cOutputMethodKeyword_5_0; }
		
		//method=STRING
		public Assignment getMethodAssignment_5_1() { return cMethodAssignment_5_1; }
		
		//STRING
		public RuleCall getMethodSTRINGTerminalRuleCall_5_1_0() { return cMethodSTRINGTerminalRuleCall_5_1_0; }
		
		//('.' STRING)*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//'.'
		public Keyword getFullStopKeyword_5_2_0() { return cFullStopKeyword_5_2_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_5_2_1() { return cSTRINGTerminalRuleCall_5_2_1; }
		
		////default and optional
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	
	
	private final TypeElements pType;
	private final SourceElements pSource;
	private final FilterElements pFilter;
	private final SinkElements pSink;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SortingGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pType = new TypeElements();
		this.pSource = new SourceElements();
		this.pFilter = new FilterElements();
		this.pSink = new SinkElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.sorting.Sorting".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Type:
	//	type=('int' | 'String' | 'double' | 'long') ('[' ']')?;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Source:
	//	'source' name=ID '{'
	//	'out:' type=Type ('input-method:' method=STRING ('.' STRING)*)? //default and optional
	//	'}';
	public SourceElements getSourceAccess() {
		return pSource;
	}
	
	public ParserRule getSourceRule() {
		return getSourceAccess().getRule();
	}
	
	//Filter:
	//	'filter' name=ID '{'
	//	'in:' inType=Type
	//	'out:' outType=Type ('method:' method=STRING ('.' STRING)*)? //default and optional
	//	'}';
	public FilterElements getFilterAccess() {
		return pFilter;
	}
	
	public ParserRule getFilterRule() {
		return getFilterAccess().getRule();
	}
	
	//Sink:
	//	'sink' name=ID '{'
	//	'in:' inType=Type ('output-method:' method=STRING ('.' STRING)*)? //default and optional
	//	'}';
	public SinkElements getSinkAccess() {
		return pSink;
	}
	
	public ParserRule getSinkRule() {
		return getSinkAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
