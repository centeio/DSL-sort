/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.sorting.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.sorting.sorting.*

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SortingGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		fsa.generateFile("test.java", resource.generate);
		resource.allContents.filter(Config);
	//		resource.allContents
	//			.filter(Greeting)
	//			.map[name]
	//			.join(', '))
	}
	
	def CharSequence generate(Resource resource)'''
	import java.Util.Arrays;
	
	
	'''
		
	
	
}

grammar org.xtext.example.sorting.Sorting with org.eclipse.xtext.common.Terminals

generate sorting "http://www.xtext.org/example/sorting/Sorting"

Config:
	'config:' name=ID
	'components:' components+=Component
	'transitions:' transitions+=Transition
;

Type:
	type=('int'|'String'|'double'|'long') ('['']')?
	;

Component:
	Source|Sink|Filter
;	
	
Source:
	'source' name=ID '{'
	'out:' type=Type
	('input-method:' method=STRING('.'STRING)*)? //default and optional
	'}'
;
	
Filter:
	'filter' name=ID '{'
	'in:' inType=Type
	'out:' outType=Type
	('method:' method=STRING('.'STRING)*)? //default and optional
	'}'
;	

Sink:
	'sink' name=ID '{'
	'in:' inType=Type
	('output-method:' method=STRING('.'STRING)*)? //default and optional
	'}'
;	

Instance:
	component=[Component] name=ID 
	('call:' method=STRING('.'STRING)*|'args:' args+=STRING*)?
;

Transition:
	(source=[Source]|source=[Filter]) "=>" (target=[Filter]|target=[Sink])|
	source=[Instance] "=>" target=[Instance]
;