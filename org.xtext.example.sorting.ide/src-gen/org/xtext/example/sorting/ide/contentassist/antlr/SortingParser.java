/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.sorting.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.sorting.ide.contentassist.antlr.internal.InternalSortingParser;
import org.xtext.example.sorting.services.SortingGrammarAccess;

public class SortingParser extends AbstractContentAssistParser {

	@Inject
	private SortingGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalSortingParser createParser() {
		InternalSortingParser result = new InternalSortingParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTypeAccess().getTypeAlternatives_0_0(), "rule__Type__TypeAlternatives_0_0");
					put(grammarAccess.getComponentAccess().getAlternatives(), "rule__Component__Alternatives");
					put(grammarAccess.getInstanceAccess().getAlternatives_3(), "rule__Instance__Alternatives_3");
					put(grammarAccess.getConfigAccess().getGroup(), "rule__Config__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
					put(grammarAccess.getTypeAccess().getGroup(), "rule__Type__Group__0");
					put(grammarAccess.getTypeAccess().getGroup_1(), "rule__Type__Group_1__0");
					put(grammarAccess.getSourceAccess().getGroup(), "rule__Source__Group__0");
					put(grammarAccess.getSourceAccess().getGroup_5(), "rule__Source__Group_5__0");
					put(grammarAccess.getSourceAccess().getGroup_5_2(), "rule__Source__Group_5_2__0");
					put(grammarAccess.getFilterAccess().getGroup(), "rule__Filter__Group__0");
					put(grammarAccess.getFilterAccess().getGroup_7(), "rule__Filter__Group_7__0");
					put(grammarAccess.getFilterAccess().getGroup_7_2(), "rule__Filter__Group_7_2__0");
					put(grammarAccess.getSinkAccess().getGroup(), "rule__Sink__Group__0");
					put(grammarAccess.getSinkAccess().getGroup_5(), "rule__Sink__Group_5__0");
					put(grammarAccess.getSinkAccess().getGroup_5_2(), "rule__Sink__Group_5_2__0");
					put(grammarAccess.getInstanceAccess().getGroup(), "rule__Instance__Group__0");
					put(grammarAccess.getInstanceAccess().getGroup_3_0(), "rule__Instance__Group_3_0__0");
					put(grammarAccess.getInstanceAccess().getGroup_3_0_2(), "rule__Instance__Group_3_0_2__0");
					put(grammarAccess.getInstanceAccess().getGroup_3_1(), "rule__Instance__Group_3_1__0");
					put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
					put(grammarAccess.getConfigAccess().getNameAssignment_2(), "rule__Config__NameAssignment_2");
					put(grammarAccess.getConfigAccess().getImportsAssignment_4(), "rule__Config__ImportsAssignment_4");
					put(grammarAccess.getConfigAccess().getComponentsAssignment_6(), "rule__Config__ComponentsAssignment_6");
					put(grammarAccess.getConfigAccess().getTransitionsAssignment_8(), "rule__Config__TransitionsAssignment_8");
					put(grammarAccess.getImportAccess().getNameAssignment_1(), "rule__Import__NameAssignment_1");
					put(grammarAccess.getTypeAccess().getTypeAssignment_0(), "rule__Type__TypeAssignment_0");
					put(grammarAccess.getSourceAccess().getNameAssignment_1(), "rule__Source__NameAssignment_1");
					put(grammarAccess.getSourceAccess().getTypeAssignment_4(), "rule__Source__TypeAssignment_4");
					put(grammarAccess.getSourceAccess().getMethodAssignment_5_1(), "rule__Source__MethodAssignment_5_1");
					put(grammarAccess.getFilterAccess().getNameAssignment_1(), "rule__Filter__NameAssignment_1");
					put(grammarAccess.getFilterAccess().getInTypeAssignment_4(), "rule__Filter__InTypeAssignment_4");
					put(grammarAccess.getFilterAccess().getOutTypeAssignment_6(), "rule__Filter__OutTypeAssignment_6");
					put(grammarAccess.getFilterAccess().getMethodAssignment_7_1(), "rule__Filter__MethodAssignment_7_1");
					put(grammarAccess.getSinkAccess().getNameAssignment_1(), "rule__Sink__NameAssignment_1");
					put(grammarAccess.getSinkAccess().getInTypeAssignment_4(), "rule__Sink__InTypeAssignment_4");
					put(grammarAccess.getSinkAccess().getMethodAssignment_5_1(), "rule__Sink__MethodAssignment_5_1");
					put(grammarAccess.getInstanceAccess().getComponentAssignment_1(), "rule__Instance__ComponentAssignment_1");
					put(grammarAccess.getInstanceAccess().getNameAssignment_2(), "rule__Instance__NameAssignment_2");
					put(grammarAccess.getInstanceAccess().getMethodAssignment_3_0_1(), "rule__Instance__MethodAssignment_3_0_1");
					put(grammarAccess.getInstanceAccess().getArgsAssignment_3_1_1(), "rule__Instance__ArgsAssignment_3_1_1");
					put(grammarAccess.getTransitionAccess().getSourceAssignment_0(), "rule__Transition__SourceAssignment_0");
					put(grammarAccess.getTransitionAccess().getTargetAssignment_2(), "rule__Transition__TargetAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SortingGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SortingGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
